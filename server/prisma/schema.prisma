generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bucket {
  user_id           String   @db.Uuid
  sequential_number Int      @id @default(autoincrement())
  wiki_id           String?  @db.Uuid
  completed         Boolean? @default(false)
  ongoing           Boolean? @default(false)
  dropped           Boolean? @default(false)
  users             users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model cart {
  order_id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id  String @db.Uuid
  merch_id String @db.Uuid
  status   String @default("To be delivered") @db.VarChar
  merch    merch  @relation(fields: [merch_id], references: [merch_id], onDelete: NoAction, onUpdate: NoAction)
  users    users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model chronicle {
  chronicle_id String  @id(map: "chronicle_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  texts        String?
  likes        Int?
  writer_id    String? @db.Uuid
  title        String?
  users        users?  @relation(fields: [writer_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "writer_id_from_user_id_fk")
  nexus        nexus[]
}

model merch {
  merch_id           String   @id(map: "merch_id_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  req_nani           Int?
  rating             Float?   @db.Real
  description        String?
  merch              String?  @db.VarChar
  seller_id          String?  @db.Uuid
  image              String?  @db.VarChar
  avalibility_status Boolean?
  cart               cart[]
  users              users?   @relation(fields: [seller_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "seller_id_from_user_id_fk")
}

model nexus {
  nexus_id                    String     @id(map: "nexus_id_pk") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                     String?    @db.Uuid
  reply_to                    String?    @db.Uuid
  comment                     String?
  upvotes                     Int?
  chronicle_id                String?    @db.Uuid
  chronicle                   chronicle? @relation(fields: [chronicle_id], references: [chronicle_id], onDelete: Cascade, onUpdate: NoAction)
  users_nexus_reply_toTousers users?     @relation("nexus_reply_toTousers", fields: [reply_to], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  users_nexus_user_idTousers  users?     @relation("nexus_user_idTousers", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model season {
  wiki_id       String  @db.Uuid
  summary       String?
  poster        String? @db.VarChar
  episode_list  Int?
  season_id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  season_number Int?
  wiki          wiki    @relation(fields: [wiki_id], references: [wiki_id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  email_id                    String      @db.VarChar
  guild                       String      @db.VarChar
  user_id                     String      @id(map: "user_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username                    String?     @db.VarChar
  joined_date                 DateTime?   @db.Date
  nani                        Int?
  avatar                      String?
  bucket                      bucket[]
  cart                        cart[]
  chronicle                   chronicle[]
  merch                       merch[]
  nexus_nexus_reply_toTousers nexus[]     @relation("nexus_reply_toTousers")
  nexus_nexus_user_idTousers  nexus[]     @relation("nexus_user_idTousers")
  wiki                        wiki[]
}

model wiki {
  wiki_id    String   @id(map: "wiki_id_pk") @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  anime_name String?  @unique(map: "anime_name_uk") @db.VarChar
  poster     String?  @db.VarChar
  summary    String?
  status     String?  @db.VarChar
  rating     Float?   @db.Real
  genre      String[] @db.VarChar
  mod_id     String?  @db.Uuid
  season     season[]
  users      users?   @relation(fields: [mod_id], references: [user_id], onUpdate: NoAction)
}
